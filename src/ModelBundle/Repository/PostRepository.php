<?php

namespace ModelBundle\Repository;

use ModelBundle\Entity\Post;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{ 
	public function addPost($data)
	{   
		$post = new Post();
        $post->setPostSharedCustomer($data['customer']);
        $post->setPostText($data['post_text']);
        $post->setLongitude($data['longitude']);
        $post->setLatitude($data['latitude']);

        if(!empty($data['post_image'])){ 
	           $photo = base64_decode($data['post_image']);
               $png_url = time().'.'.'png';
               file_put_contents('img/post_image/'.$png_url,$photo);
               $post->setPostImage($data['path'].'/img/post_image/'.$png_url);
           }
           
        $this->_em->persist($post);
        $this->_em->flush();
        return $post;
	}

  public function getNearPosts($data)
  {
    $config = new \Doctrine\ORM\Configuration();
    $config->addCustomNumericFunction('COS', '\DoctrineExtensions\Query\Mysql\Cos');

        $config->addCustomNumericFunction('Acos', 'DoctrineExtensions\Query\Mysql\Acos');

        $config->addCustomNumericFunction('RADIANS', 'DoctrineExtensions\Query\Mysql\Radians');
        $config->addCustomNumericFunction('SIN', 'DoctrineExtensions\Query\Mysql\Sin');
           

              $qb = $this->createQueryBuilder('l'); 

              $qb->addSelect(
                '( 6371 * ACOS(cos(radians(' . $data['latitude'] . '))' .
                '* cos( radians( l.latitude ) )' .
                '* cos( radians( l.longitude )' .
                '- radians(' . $data['longitude'] . ') )' .
                '+ sin( radians(' . $data['latitude'] . ') )' .
                '* sin( radians( l.latitude ) ) ) ) as distance'
                )
          
               ->orderBy('l.createdAt', 'DESC');
          
              if(!empty($data['distance'])){
                $qb->having('distance < :distance')
               ->setParameter('distance',  $data['distance']);

               // Without own customer posts
                $qb->where('l.postSharedCustomer != :current_customer_id')
                   ->setParameter('current_customer_id', $data['current_customer_id']);

             //   $qb->orderBy('l.createdAt', 'DESC');
              }
            return $qb->getQuery()->getResult();
  }
}

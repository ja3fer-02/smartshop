<?php

namespace ModelBundle\Repository;

use paragraph1\phpFCM\Client;
use paragraph1\phpFCM\Message;
use paragraph1\phpFCM\Recipient\Device;
use paragraph1\phpFCM\Notification;
use ModelBundle\Model\MessageWithContent;


/**
 * PromotionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoreRepository extends \Doctrine\ORM\EntityRepository
{

	public function getNearStores($data)
	{
		$config = new \Doctrine\ORM\Configuration();
		$config->addCustomNumericFunction('COS', '\DoctrineExtensions\Query\Mysql\Cos');

        $config->addCustomNumericFunction('Acos', 'DoctrineExtensions\Query\Mysql\Acos');

        $config->addCustomNumericFunction('RADIANS', 'DoctrineExtensions\Query\Mysql\Radians');
        $config->addCustomNumericFunction('SIN', 'DoctrineExtensions\Query\Mysql\Sin');
           

           	$qb = $this->createQueryBuilder('s')
	        ->leftJoin('s.location', 'l');


	       	    $qb->addSelect(
                '( 6371 * ACOS(cos(radians(' . $data['latitude'] . '))' .
                '* cos( radians( l.latitude ) )' .
                '* cos( radians( l.longitude )' .
                '- radians(' . $data['longitude'] . ') )' .
                '+ sin( radians(' . $data['latitude'] . ') )' .
                '* sin( radians( l.latitude ) ) ) ) as distance'
                )
	        
	             ->orderBy('distance', 'ASC');
	        
	         
              if(!empty($data['distance'])){
              	$qb->having('distance < :distance')
	             ->setParameter('distance',  $data['distance']);
              }
              if(!empty($data['product'])){
                $qb->leftJoin('s.storeProductsStore','p')
                ->andWhere('p.storeProductProduct = :product')
                ->setParameter('product',$data['product'])
                ->addSelect('p');
              }
	          return $qb->getQuery()->getResult();
	}

  public function sendNotificationToUser($store_id,$main_title,$second_title,$description){
        $data = $this->_em;
        $customerRepository = $this->getEntityManager()->getRepository('ModelBundle:Customer');
        $store=$this->getEntityManager()->getRepository('ModelBundle:Store')->find($store_id);

        // Filter customers to notify only nearby customers
        $data = [
        'longitude' => $store->getLocation()->getLongitude(),
        'latitude'  => $store->getLocation()->getLatitude(),
        'distance'  => 70
        ];

       $NearbyCustomers = $customerRepository->getNearCustomersToNotifyWithActiveNotification($data);
       var_dump(sizeof($NearbyCustomers)."Nearby Customers found. In case of 0 : Maybe no devicesTokens for nearby customers or no users with notification activated");
       
       $formattedNearbyCustomers=array();
        foreach ($NearbyCustomers as $NearbyCustomer) {
               array_push($formattedNearbyCustomers, $NearbyCustomer[0]);
          }

         $devicesTokensStrings= array();
        
        if($formattedNearbyCustomers){
        foreach ($formattedNearbyCustomers as $customerWithActiveNotification) {
              foreach ($customerWithActiveNotification->getCustomerDeviceToken() as $devicesTokens) {
                   array_push($devicesTokensStrings, $devicesTokens->getNotificationDeviceToken());    
                  }
               }

        var_dump(sizeof($devicesTokensStrings)." Device Tokens found");

        /* FCM Push Notification*/

        $apiKey = 'AAAAoryAgw0:APA91bGTPwyFZeKTVv0ltDlW6W3JQQBeS_lVFAcLaiMim5n1iKTsSvUS5N2PpRdEbAMDZghtASR6hJh1ZyHJj3tkMkF4Qzlnb0BYaOlxzV_xxE1TaCfphBWB48kR6tlo2nUGDHaoBnsI';
        $client = new Client();
        $client->setApiKey($apiKey);
        $client->injectHttpClient(new \GuzzleHttp\Client());

         if(sizeof($devicesTokensStrings)!=0){    
                $message = new MessageWithContent();
                foreach ($devicesTokensStrings as $deviceTokenString) {
                  $message->addRecipient(new Device($deviceTokenString));    
                }
                
                $message->setData(array('mainTitle' => $main_title,'secondTitle'=>$second_title ,'description'=>$description));
                $message->setContentAvailable();
                $response = $client->send($message);
                var_dump($response->getStatusCode());
          } 
  
        return $devicesTokensStrings ;
    }
}


  public function NotifyUsersAboutProductNewPrice($store_product_id,$main_title,$second_title,$description){
        $data = $this->_em;
        $customerRepository = $this->getEntityManager()->getRepository('ModelBundle:Customer');
        $storeProduct=$this->getEntityManager()->getRepository('ModelBundle:StoreProduct')->find($store_product_id);
        $store=$storeProduct->getStoreProductStore();

        
                // Filter customers to notify only nearby customers
        $data = [
        'longitude' => $store->getLocation()->getLongitude(),
        'latitude'  => $store->getLocation()->getLatitude(),
        'distance'  => 70,
        'product'  => $storeProduct->getStoreProductProduct()
        ];

       $NearbyCustomers = $customerRepository->getNearCustomersToNotifyWithActiveNotificationAndFavoredProduct($data);
       var_dump(sizeof($NearbyCustomers)."Nearby Customers found. In case of 0 : Maybe no devicesTokens for nearby customers or no users with notification activated");
       
       $formattedNearbyCustomers=array();
        foreach ($NearbyCustomers as $NearbyCustomer) {
               array_push($formattedNearbyCustomers, $NearbyCustomer[0]);
          }

         $devicesTokensStrings= array();
        
        if($formattedNearbyCustomers){
        foreach ($formattedNearbyCustomers as $customerWithActiveNotification) {
              foreach ($customerWithActiveNotification->getCustomerDeviceToken() as $devicesTokens) {
                   array_push($devicesTokensStrings, $devicesTokens->getNotificationDeviceToken());    
                  }
               }

        var_dump(sizeof($devicesTokensStrings)." Device Tokens found");

        /* FCM Push Notification*/

        $apiKey = 'AAAAoryAgw0:APA91bGTPwyFZeKTVv0ltDlW6W3JQQBeS_lVFAcLaiMim5n1iKTsSvUS5N2PpRdEbAMDZghtASR6hJh1ZyHJj3tkMkF4Qzlnb0BYaOlxzV_xxE1TaCfphBWB48kR6tlo2nUGDHaoBnsI';
        $client = new Client();
        $client->setApiKey($apiKey);
        $client->injectHttpClient(new \GuzzleHttp\Client());

         if(sizeof($devicesTokensStrings)!=0){    
                $message = new MessageWithContent();
                foreach ($devicesTokensStrings as $deviceTokenString) {
                  $message->addRecipient(new Device($deviceTokenString));    
                }
                
                $message->setData(array('mainTitle' => $main_title,'secondTitle'=>$second_title ,'description'=>$description));
                $message->setContentAvailable();
                $response = $client->send($message);
                var_dump($response->getStatusCode());
          } 
  
        return $devicesTokensStrings ;
    }
}
}

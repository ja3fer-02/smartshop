<?php

namespace ModelBundle\Repository;

use Symfony\Component\HttpFoundation\Request;
use ModelBundle\Entity\Admin;
use ModelBundle\Entity\Customer;
use ModelBundle\Entity\StoreManager;
use ModelBundle\Entity\StoreChainManager;
/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
	
	public function registerCustomer(Request $request ,$container)
	{                $path     =$request->getSchemeAndHttpHost().$request->getBasePath();

	         //$encoder = $container->get('security.password_encoder');
           $password = $request->get('password');
    	     $customer = new Customer($request->get('email'));
           $customer->setFirstname(@$request->get('firstname'));
           $customer->setLastname(@$request->get('lastname'));
           $customer->setEmail(@$request->get('email'));
          // $customer->setPassword($encoder->encodePassword($customer,$password));
          // $customer->setPasswordToken($encoder->encodePassword($customer, $password));
           $customer->setPassword(md5($password));
           $customer->setPasswordToken(md5($password));

           $customer->setCountryCode($request->get('country_code'));
           $customer->setFacebookId(@$request->get('facebook_id'));
           $customer->setVerifed(0);
           $customer->setActivateNotification(1);
           $customer->setActivated(0);
           $customer->setTokenVerified(md5(time()));
         //  $image=$request->files->get('photo');
         //  if($image){
          // $customer->setPhoto($image);
         //}else{
           if(!empty($request->get("photo"))){ 
             $photo = base64_decode($request->get("photo"));
               $png_url = time().'.'.'png';
               file_put_contents('img/photo/'.$png_url,$photo);
               $customer->setPhoto($path.'/img/photo/'.$png_url);
             }
           //}
           $customer->setPhone(@$request->get('phone'));
            
           return $customer;

	}

    public function registerAdmin(Request $request,$container)
    {
          // $encoder = $container->get('security.password_encoder');
           $password = $request->get('password');
           $adiin = new Admin();
           $adiin->setFirstname(@$request->get('firstname'));
           $adiin->setLastname(@$request->get('lastname'));
           $adiin->setEmail(@$request->get('email'));
         //  $adiin->setPassword($encoder->encodePassword($adiin,$password));
           $adiin->setPassword(md5($password));
           $adiin->setVerifed(0);
           $adiin->setActivated(0);
           $adiin->setTokenVerified(md5(time()));
           $adiin->setPhoto(@$request->files->get('photo'));
           $adiin->setPhone(@$request->get('phone'));
            
           return $adiin;

    }

    public function registerStoreManager(Request $request,$container)
    {
          // $encoder = $container->get('security.password_encoder');
           $password = $request->get('password');
           $store_manager = new StoreManager();
           $store_manager->setFirstname(@$request->get('firstname'));
           $store_manager->setLastname(@$request->get('lastname'));
           $store_manager->setEmail(@$request->get('email'));
           //$store_manager->setPassword($encoder->encodePassword($store_manager,$password));
           $store_manager->setPassword(md5($password));
           $store_manager->setVerifed(0);
           $store_manager->setActivated(0);
           $store_manager->setTokenVerified(md5(time()));
           $store_manager->setPhoto(@$request->files->get('photo'));
           $store_manager->setPhone(@$request->get('phone'));
            
           return $store_manager;

    }

    public function registerStoreChainManager(Request $request,$container)
    {
           //$encoder = $container->get('security.password_encoder');
           $password = $request->get('password');
           $store_chain_manager = new StoreChainManager();
           $store_chain_manager->setFirstname(@$request->get('firstname'));
           $store_chain_manager->setLastname(@$request->get('lastname'));
           $store_chain_manager->setEmail(@$request->get('email'));
          // $store_chain_manager->setPassword($encoder->encodePassword($store_chain_manager,$password));
           $store_chain_manager->setPassword(md5($password));
           $store_chain_manager->setVerifed(0);
           $store_chain_manager->setActivated(0);
           $store_chain_manager->setTokenVerified(md5(time()));
           $store_chain_manager->setPhoto(@$request->files->get('photo'));
           $store_chain_manager->setPhone(@$request->get('phone'));
            
           return $store_chain_manager;

    }
   

    public function getNearCustomersToNotifyWithActiveNotification($data)
  {
    $config = new \Doctrine\ORM\Configuration();
    $config->addCustomNumericFunction('COS', '\DoctrineExtensions\Query\Mysql\Cos');

        $config->addCustomNumericFunction('Acos', 'DoctrineExtensions\Query\Mysql\Acos');

        $config->addCustomNumericFunction('RADIANS', 'DoctrineExtensions\Query\Mysql\Radians');
        $config->addCustomNumericFunction('SIN', 'DoctrineExtensions\Query\Mysql\Sin');
           

              $qb = $this->createQueryBuilder('l'); 

              $qb->addSelect(
                '( 6371 * ACOS(cos(radians(' . $data['latitude'] . '))' .
                '* cos( radians( l.latitude ) )' .
                '* cos( radians( l.longitude )' .
                '- radians(' . $data['longitude'] . ') )' .
                '+ sin( radians(' . $data['latitude'] . ') )' .
                '* sin( radians( l.latitude ) ) ) ) as distance'
                )
          
               ->orderBy('distance', 'ASC');
          
              if(!empty($data['distance'])){
                $qb->having('distance < :distance')
               ->setParameter('distance',  $data['distance']);
                
                // With active notification
                $qb->where('l.activateNotification = true');

              }
            return $qb->getQuery()->getResult();
  }

    public function getNearCustomersToNotifyWithActiveNotificationAndFavoredProduct($data)
  {
    $config = new \Doctrine\ORM\Configuration();
    $config->addCustomNumericFunction('COS', '\DoctrineExtensions\Query\Mysql\Cos');

        $config->addCustomNumericFunction('Acos', 'DoctrineExtensions\Query\Mysql\Acos');

        $config->addCustomNumericFunction('RADIANS', 'DoctrineExtensions\Query\Mysql\Radians');
        $config->addCustomNumericFunction('SIN', 'DoctrineExtensions\Query\Mysql\Sin');
           

              $qb = $this->createQueryBuilder('u'); 

              $qb->addSelect(
                '( 6371 * ACOS(cos(radians(' . $data['latitude'] . '))' .
                '* cos( radians( u.latitude ) )' .
                '* cos( radians( u.longitude )' .
                '- radians(' . $data['longitude'] . ') )' .
                '+ sin( radians(' . $data['latitude'] . ') )' .
                '* sin( radians( u.latitude ) ) ) ) as distance'
                )
          
               ->orderBy('distance', 'ASC');

              if(!empty($data['distance'])){
                $qb->having('distance < :distance')
               ->setParameter('distance',  $data['distance']);
                
                // With active notification
                $qb->where('u.activateNotification = true');

                // Product faverod
                $qb->andWhere(':product MEMBER OF u.customerProductsFavored');
                $qb->setParameter('product',  $data['product']);
              }
            return $qb->getQuery()->getResult();
  }
}
